---
import { type CollectionEntry, getCollection } from 'astro:content';
import { getPosts } from '../../utils/post';
import BlogPost from '../../layouts/BlogPost.astro';
import ListRelatedPosts from '../../components/blog/ListRelatedPosts.astro';
import { Image } from 'astro:assets';

const posts = await getCollection('blog');
export async function getStaticPaths() {
	const postsPath = await getPosts();

	return postsPath.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}
type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const MAX_POSTS = 3;
const getRelatedPosts = (relatedPost: Props) => {
	const lowercaseTags = new Set(
		relatedPost.data.tags.map((tag) => tag.toLowerCase()),
	);
	const relatedPosts = posts.filter(
		(p) =>
			p.slug !== relatedPost.slug &&
			p.data.tags.some((t) => lowercaseTags.has(t.toLowerCase())),
	);
	return relatedPosts.slice(0, MAX_POSTS);
};

const relatedPosts = getRelatedPosts(post);

const { Content, headings, remarkPluginFrontmatter } = await post.render();
---

<BlogPost
	id={post.id}
	data={post.data}
	headings={headings}
	readTime={remarkPluginFrontmatter.minutesRead}
>
	<div class="mt-8 text-justify">
		<article class="w-full max-w-full">
			<div
				class="prose prose-lg mb-12 min-w-full md:prose-xl dark:prose-invert"
			>
				<Content />
			</div>
			<div
				class="gal mb-8 grid grid-cols-4 justify-between justify-items-center gap-[7px]"
			>
				{
					(post?.data?.images ?? [])?.length > 0 &&
						post?.data?.images?.map((image) => {
							const { width, height, src /*index , format*/ } = image;

							return (
								<>
									<a
										href={src}
										data-pswp-width={width}
										data-pswp-height={height}
										data-cropped="true"
									>
										<Image
											src={image}
											width={188}
											format="webp"
											quality={90}
											widths={[240, 540, 720]}
											decoding="async"
											loading="lazy"
											style="object-position: 10% 15%"
											class="h-full transform object-cover max-xs:w-full"
											alt={`img of ${'title'}`}
										/>
									</a>
								</>
							);
						})
				}
			</div>

			<!-- related posts -->
			<footer>
				<ListRelatedPosts posts={relatedPosts} />
			</footer>
		</article>
	</div>

	<!--{disqusEnabled && <Disqus />}-->
</BlogPost>

<script>
	import PhotoSwipeLightbox from 'photoswipe/lightbox';
	import 'photoswipe/style.css';

	const lightbox = new PhotoSwipeLightbox({
		bgOpacity: 0.9,
		gallery: '.gal',
		children: 'a',
		pswpModule: () => import('photoswipe'),
	});

	lightbox.on('uiRegister', function () {
		lightbox?.pswp?.ui?.registerElement({
			name: 'download-button',
			order: 8,
			isButton: true,
			tagName: 'a',

			// SVG with outline
			html: {
				isCustomSVG: true,
				inner:
					'<path d="M20.5 14.3 17.1 18V10h-2.2v7.9l-3.4-3.6L10 16l6 6.1 6-6.1ZM23 23H9v2h14Z" id="pswp__icn-download"/>',
				outlineID: 'pswp__icn-download',
			},

			// Or provide full svg:
			// html: '<svg width="32" height="32" viewBox="0 0 32 32" aria-hidden="true" class="pswp__icn"><path d="M20.5 14.3 17.1 18V10h-2.2v7.9l-3.4-3.6L10 16l6 6.1 6-6.1ZM23 23H9v2h14Z" /></svg>',

			// Or provide any other markup:
			// html: '<i class="fa-solid fa-download"></i>'

			onInit: (element: HTMLElement, pswp) => {
				const anchorElement = element as HTMLAnchorElement;

				anchorElement.setAttribute('download', '');
				anchorElement.setAttribute('target', '_blank');
				anchorElement.setAttribute('rel', 'noopener');

				pswp.on('change', () => {
					const source = pswp?.currSlide?.data?.src;

					if (typeof source === 'string') {
						anchorElement.href = source;
					}
				});
			},
		});
	});

	lightbox.init();
</script>
