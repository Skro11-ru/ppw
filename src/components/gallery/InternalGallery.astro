---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';

const { gallery } = Astro.params;

let paths = {};

if (gallery === 'all') {
	paths = import.meta.glob<{ default: ImageMetadata }>(
		'../../../public/photos/gallery/all/*.{jpeg,jpg,png,gif}',
	);
}

if (gallery === 'man') {
	paths = import.meta.glob<{ default: ImageMetadata }>(
		'../../../public/photos/gallery/man/*.{jpeg,jpg,png,gif}',
	);
}

if (gallery === 'woman') {
	paths = import.meta.glob<{ default: ImageMetadata }>(
		'../../../public/photos/gallery/woman/*.{jpeg,jpg,png,gif}',
	);
}

if (gallery === 'family') {
	paths = import.meta.glob<{ default: ImageMetadata }>(
		'../../../public/photos/gallery/family/*.{jpeg,jpg,png,gif}',
	);
}

const images = [];

//todo https://docs.astro.build/en/recipes/dynamically-importing-images/
for (const [, value] of Object.entries(paths)) {
	const resolve: { default: ImageMetadata } = await (
		value as () => Promise<{ default: ImageMetadata }>
	)();
	images.push(resolve.default);
}
---

{
	images.map((item, index) => {
		const { width, height, src /*, format*/ } = item;
		const cssClassImage =
			'h-full w-full transform rounded-lg object-cover transition-transform ' +
			'duration-500 ease-[cubic-bezier(0.165,0.84,0.44,1)] hover:scale-105';
		const sizesImage = `(max-width: 360px) 240px, (max-width: 720px) 540px, (max-width: 1600px) 720px, ${width}px`;
		return (
			<a
				class="relative overflow-hidden"
				class:list={[
					{ 'v-stretch': index === 1 },
					{ 'v-stretch': index === 5 },
					{ 'v-stretch': index === 12 },
					{ 'v-stretch': index === 15 },

					{ 'h-stretch': index === 2 },
					{ 'h-stretch': index === 8 },
					{ 'h-stretch': index === 10 },
					{ 'h-stretch': index === 18 },

					{ 'big-stretch': index === 6 },
					{ 'big-stretch': index === 16 },
				]}
				href={src}
				data-pswp-width={width}
				data-pswp-height={height}
				data-cropped="true"
			>
				<Image
					src={item}
					alt="A bird sitting on a nest of eggs."
					width={width}
					quality={10}
					widths={[240, 540, 720, width]}
					sizes={sizesImage}
					decoding="async"
					loading="lazy"
					class={cssClassImage}
				/>
			</a>
		);
	})
}
