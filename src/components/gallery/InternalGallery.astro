---
import type { ImageMetadata } from 'astro';
import { Image } from 'astro:assets';
// import { getAllImages } from '../../utils/getAllImages';

interface ExtendedImageMetadata extends ImageMetadata {
	index: number;
	colored: boolean;
	// ...
}

const { gallery } = Astro.params;

let paths = {};

const data: {
	images: ExtendedImageMetadata[];
	setting: {
		vertical: number[];
		horizontal: number[];
		big: number[];
	};
} = {
	images: [],
	setting: {
		vertical: [],
		horizontal: [],
		big: [],
	},
};

if (gallery === 'man') {
	paths = import.meta.glob<{ default: ExtendedImageMetadata }>(
		'../../../public/photos/gallery/man/*.{jpeg,jpg,png,gif,JPEG,JPG,PNG,GIF}',
	);

	data.setting = {
		horizontal: [],
		vertical: [],
		big: [0, 5, 7, 9, 14, 16, 18, 23, 25, 27, 31, 33],
	};
}

if (gallery === 'woman') {
	paths = import.meta.glob<{ default: ExtendedImageMetadata }>(
		'../../../public/photos/gallery/woman/*.{jpeg,jpg,png,gif,JPEG,JPG,PNG,GIF}',
	);

	data.setting = {
		horizontal: [],
		vertical: [],
		big: [0, 5, 7, 9, 14, 16, 18, 23, 25, 27, 32, 34, 36, 41],
	};
}

if (gallery === 'business') {
	paths = import.meta.glob<{ default: ExtendedImageMetadata }>(
		'../../../public/photos/gallery/business/*.{jpeg,jpg,png,gif,JPEG,JPG,PNG,GIF}',
	);

	data.setting = {
		horizontal: [],
		vertical: [],
		big: [0, 5, 7, 9, 14, 16, 18, 23],
	};
}

if (gallery === 'moto') {
	paths = import.meta.glob<{ default: ExtendedImageMetadata }>(
		'../../../public/photos/gallery/moto/*.{jpeg,jpg,png,gif,JPEG,JPG,PNG,GIF}',
	);

	data.setting = {
		horizontal: [],
		vertical: [],
		big: [0, 5, 7, 9, 14, 16, 18, 23, 25, 27, 32, 34, 36, 41, 43, 45],
	};
}

if (gallery === 'family') {
	paths = import.meta.glob<{ default: ExtendedImageMetadata }>(
		'../../../public/photos/gallery/family/*.{jpeg,jpg,png,gif,JPEG,JPG,PNG,GIF}',
	);

	data.setting = {
		horizontal: [],
		vertical: [],
		big: [0, 5, 7, 9, 14, 16, 18, 23],
	};
}

const currentPath = Astro.url.pathname;

if (currentPath.includes('achievements')) {
	paths = import.meta.glob<{ default: ExtendedImageMetadata }>(
		'../../../public/photos/achievements/*.{jpeg,jpg,png,gif,JPEG,JPG,PNG,GIF}',
	);

	data.setting = {
		horizontal: [],
		vertical: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
		big: [],
	};
}

//todo https://docs.astro.build/en/recipes/dynamically-importing-images/
for (const [, value] of Object.entries(paths)) {
	const resolve: { default: ExtendedImageMetadata } = await (
		value as () => Promise<{ default: ExtendedImageMetadata }>
	)();
	const index = resolve.default.src?.split('/')?.at(-1)?.split('.')?.at(0);

	const img = resolve.default;
	const colored = index !== undefined && index.includes('c');

	if (index !== undefined) {
		img['index'] = Number(index.replaceAll(/[a-zA-Z]/g, ''));
	}

	if (colored) {
		img['colored'] = true;
	}

	data.images.push(img);

	data.images = data.images.sort((a, b) => a.index - b.index);
}

// todo change get images to getAllImages
// const data1 = getAllImages(gallery, Astro.url.pathname);

const isDev = import.meta.env.MODE === 'development';
---

{
	data.images.map((item, index_) => {
		const { width, height, src, colored /*index , format*/ } = item;

		return (
			<a
				class="relative overflow-hidden"
				style={`order: ${index_}`}
				class:list={[
					'v-stretch',
					{ 'v-stretch': data.setting.vertical.includes(index_) },
					{ 'h-stretch': data.setting.horizontal.includes(index_) },
					{ 'big-stretch': data.setting.big.includes(index_) },
					{ 'hover:grayscale': colored },
				]}
				href={src}
				data-pswp-width={width}
				data-pswp-height={height}
				data-cropped="true"
			>
				<Image
					src={item}
					alt="photo"
					width={width}
					quality={90}
					widths={[480, 768]}
					decoding="async"
					loading="lazy"
					class="h-full w-full rounded-lg object-cover"
				/>

				{() => {
					if (isDev) {
						return <span class="absolute left-0 top-0"> {index_} </span>;
					}
				}}
			</a>
		);
	})
}
